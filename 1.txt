// Beginning with an empty binary tree, construct binary tree by inserting the values in
// the order given. After constructing a binary tree perform following operations on it-
// •Perform inorder, preorder and post order traversal
// •Change a tree so that the roles of the left and right pointers are swapped at every
// node
// •Find the height of tree
// •Copy this tree to another [operator=]
// •Count number of leaves, number of internal nodes.
// •Erase all nodes in a binary tree. (Implement both recursive and non-recursive meth-
// ods)

#include <iostream>
#include <climits>
#include <stack>
using namespace std;

class Node {
public:
    int data;
    Node* left;
    Node* right;

    Node(int d) {
        data = d;
        left = NULL;
        right = NULL;
    }
};

Node* createTree() {
    int d;
    cout << "Enter data (-1 if NULL): ";
    cin >> d;
    if (d == -1) return NULL;
    Node* root = new Node(d);
    cout << "Enter Left of " << d << ": ";
    root->left = createTree();
    cout << "Enter Right of " << d << ": ";
    root->right = createTree();
    return root;
}

void inorder(Node* root) {
    if (root == NULL) return;
    inorder(root->left);
    cout << root->data << " ";
    inorder(root->right);
}

void preorder(Node* root) {
    if (root == NULL) return;
    cout << root->data << " ";
    preorder(root->left);
    preorder(root->right);
}

void postorder(Node* root) {
    if (root == NULL) return;
    postorder(root->left);
    postorder(root->right);
    cout << root->data << " ";
}

void swapTree(Node* root) {
    if (!root) return;
    swap(root->left, root->right);
    swapTree(root->left);
    swapTree(root->right);
}

int height(Node* root) {
    if (root == NULL) return 0;
    return 1 + max(height(root->left), height(root->right));
}

void countLeaves(Node* root, int& ctr) {
    if (!root) return;
    if (root->left == NULL && root->right == NULL) ctr++;
    countLeaves(root->left, ctr);
    countLeaves(root->right, ctr);
}

void countInternal(Node* root, int& ctr) {
    if (!root) return;
    if (root->left || root->right) ctr++;
    countInternal(root->left, ctr);
    countInternal(root->right, ctr);
}

Node* copyTree(Node* root) {
    if (!root) return NULL;
    Node* newNode = new Node(root->data);
    newNode->left = copyTree(root->left);
    newNode->right = copyTree(root->right);
    return newNode;
}

void eraseRecursive(Node*& root) {
    if (!root) return;
    eraseRecursive(root->left);
    eraseRecursive(root->right);
    delete root;
    root = NULL;
}

void eraseNonRecursive(Node*& root) {
    if (!root) return;
    stack<Node*> st;
    st.push(root);
    while (!st.empty()) {
        Node* curr = st.top();
        st.pop();
        if (curr->left) st.push(curr->left);
        if (curr->right) st.push(curr->right);
        delete curr;
    }
    root = NULL;
}

int main() {
    Node* root = NULL;
    Node* copiedRoot = NULL;
    int choice;

    while (true) {
        cout << "\nMenu" << endl;
        cout << "1. Create Tree" << endl;
        cout << "2. Inorder" << endl;
        cout << "3. Preorder" << endl;
        cout << "4. Postorder" << endl;
        cout << "5. Swap Tree" << endl;
        cout << "6. Height" << endl;
        cout << "7. Copy Tree" << endl;
        cout << "8. Count Leaves" << endl;
        cout << "9. Count Internal Nodes" << endl;
        cout << "10. Erase Recursively" << endl;
        cout << "11. Erase Non-Recursively" << endl;
        cout << "12. Exit" << endl;
        cout << "Enter choice: ";
        cin >> choice;

        switch (choice) {
        case 1:
            root = createTree();
            break;
        case 2:
            cout << "Inorder: ";
            inorder(root);
            cout << endl;
            break;
        case 3:
            cout << "Preorder: ";
            preorder(root);
            cout << endl;
            break;
        case 4:
            cout << "Postorder: ";
            postorder(root);
            cout << endl;
            break;
        case 5:
            swapTree(root);
            cout << "Tree swapped." << endl;
            break;
        case 6:
            cout << "Height: " << height(root) << endl;
            break;
        case 7:
            copiedRoot = copyTree(root);
            cout << "Tree copied. Inorder of copied tree: ";
            inorder(copiedRoot);
            cout << endl;
            break;
        case 8:
            {
                int ctr = 0;
                countLeaves(root, ctr);
                cout << "Number of Leaves: " << ctr << endl;
            }
            break;
        case 9:
            {
                int ctr = 0;
                countInternal(root, ctr);
                cout << "Number of Internal Nodes: " << ctr << endl;
            }
            break;
        case 10:
            eraseRecursive(root);
            cout << "Tree erased recursively." << endl;
            break;
        case 11:
            eraseNonRecursive(root);
            cout << "Tree erased non-recursively." << endl;
            break;
        case 12:
            cout << "Exiting..." << endl;
            return 0;
        default:
            cout << "Invalid input!" << endl;
        }
    }
    return 0;
}

// t.c & s.c = O(n)
