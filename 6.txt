//Represent a given graph using adjacency list to perform DFS and BFS. Use the map of the area around the college as the graph. 
//Identify the prominent landmarks as nodes and perform DFS and BFS on that.

#include <iostream>
#include <string>
#include <queue>
using namespace std;

class node {
    string data;
    node* next;

public:
    node(string s) {
        data = s;
        next = nullptr;
    }
    friend class graph;
};

class graph {
    node** arr;

    void add1(int v) {
        arr = new node*[v];

        for (int i = 0; i < v; i++) {
            cout << "Enter the place: ";
            string s;
            cin >> s;
            arr[i] = new node(s);

            cout << "Enter number of adjacent nodes: ";
            int n;
            cin >> n;
            node* temp = arr[i];

            for (int j = 0; j < n; j++) {
                cout << "Enter adjacent place: ";
                cin >> s;
                temp->next = new node(s);
                temp = temp->next;
            }
        }
    }

    int findindex(string s, int v) {
        for (int i = 0; i < v; i++) {
            if (arr[i]->data == s) {
                return i;
            }
        }
        return -1;
    }

    void display1(int v) {
        cout << "\nAdjacency List:\n";
        for (int i = 0; i < v; i++) {
            node* temp = arr[i];
            while (temp) {
                cout << temp->data;
                if (temp->next) cout << " -> ";
                temp = temp->next;
            }
            cout << endl;
        }
    }

    void bfs1(bool visited[], int v) {
        cout << "\nBFS Traversal:\n";
        queue<node*> q;
        q.push(arr[0]);
        visited[0] = true;

        while (!q.empty()) {
            node* temp = q.front();
            q.pop();
            cout << temp->data << " ";

            temp = temp->next;
            while (temp) {
                int index = findindex(temp->data, v);
                if (index != -1 && !visited[index]) {
                    q.push(arr[index]);
                    visited[index] = true;
                }
                temp = temp->next;
            }
        }
        cout << endl;
    }

    void dfs1(int index, bool visited[], int v) {
        cout << "\nDFS Traversal:\n";
        visited[index] = true;
        cout << arr[index]->data << " ";

        node* temp = arr[index]->next;
        while (temp) {
            int adj = findindex(temp->data, v);
            if (adj != -1 && !visited[adj]) {
                dfs1(adj, visited, v);
            }
            temp = temp->next;
        }
    }

public:
    void add(int v) {
        add1(v);
    }

    void display(int v) {
        display1(v);
    }

    void bfs(bool visited[], int v) {
        bfs1(visited, v);
    }

    void dfs(int index, bool visited[], int v) {
        dfs1(index, visited, v);
    }
};

int main() {
    graph g;
    int v;
    cout << "Enter the number of places (vertices): ";
    cin >> v;

    bool* visited = new bool[v]();
    bool* visited1 = new bool[v]();

    g.add(v);
    g.display(v);
    g.bfs(visited, v);
    g.dfs(0, visited1, v);

    delete[] visited;
    delete[] visited1;

    return 0;
}

// t.c = O(v + e) , s.c = O(1)
