// Implement all the functions of a dictionary (ADT) using open hashing technique: sep-
// arate chaining using linked list Data: Set of (key, value) pairs, Keys are mapped to
// values, Keys must be comparable, and Keys must be unique. Standard Operations: In-
// sert(key, value), Find(key), Delete(key)

#include <iostream>
#include <string>
using namespace std;

class node{
    string data;
    string meaning;
    node* next;

    node(string s, string m){
        data = s;
        meaning = m;
        next = nullptr;
    }
    friend class openhash;
};

class openhash{
    node* arr[26] = {nullptr};

    void insert(string s,string m){
        int index = s[0] - 'a';
        node* temp =  arr[index];
        while(temp){
            if(temp->data == s){
                temp->meaning = m;
                return;
            }
            temp = temp->next;
        }

        node* newnode = new node(s,m);
        newnode->next = arr[index];
        arr[index] = newnode;
    }

    void search(string s){
        int index = s[0] - 'a';
        node* temp = arr[index];
        while(temp){
            if(temp->data == s){
                cout<< temp->data << " -> " << temp->meaning << endl;
                return;
            }
            temp = temp->next;
        }
        cout << "THE WORD IS NOT PRESENT\n";
    }

    void delword(string s){
        int index = s[0] - 'a';
        node* temp = arr[index];
        node* prev = nullptr;
        
        while(temp && temp->data != s){
            prev = temp;
            temp = temp->next;
        }
        if(!temp) return;

        if(!prev){
            arr[index] = temp->next;
        }else{
            prev->next = temp->next;
        }
        delete temp;
    }

    void display(){
        for (int i = 0; i < 26; i++){
            node* temp = arr[i];
            if(temp){
                cout<< char(i + 'a') << " : ";
                while(temp){
                    cout<< temp->data << " -> " << temp->meaning ;
                    if(temp->next){
                        cout<<" , ";
                    }
                    temp = temp->next;
                }
                cout<<endl;
            }
        }
    }

public:
    void menu() {
        string key, value;
        int ch;
        cout << "1. Insert\n2. Search\n3. Delete\n4. Exit\n";
        do {
            cout << "Enter choice: ";
            cin >> ch;
            switch (ch) {
                case 1:
                    cout << "Enter key: ";
                    cin >> key;
                    cout << "Enter value: ";
                    cin >> value;
                    insert(key, value);
                    display();
                    break;
                case 2:
                    cout << "Enter key to search: ";
                    cin >> key;
                    search(key);
                    break;
                case 3:
                    cout << "Enter key to delete: ";
                    cin >> key;
                    delword(key);
                    display();
                    break;
            }
        } while (ch != 4);
    }
};

int main() {
    openhash h;
    h.menu();
    return 0;
}

// t.c = O(n) for worst ,  s.c = O(1) 
