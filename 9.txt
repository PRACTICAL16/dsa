// A Dictionary stores keywords and its meanings. Provide facility for adding new key-
// words. Provide facility to display whole data sorted in ascending/ Descending order.
// Also find how many maximum comparisons may require for finding any keyword.
// Use Height balance tree and find the complexity for finding a keyword.

#include <iostream>
#include <string>
using namespace std;

class node {
    string keyword, meaning;
    int height;
    node *left, *right;

public:
    node(string k, string m) {
        left = NULL;
        right = NULL;
        keyword = k;
        meaning = m;
        height = 1;
    }
    friend class avl;
};

class avl {
    node *root = NULL;

    int getbalance(node *temp1) {
        if (!temp1) {
            return 0;
        }
        return getheight(temp1->left) - getheight(temp1->right);
    }

    int getheight(node *temp1) {
        if (!temp1) {
            return 0;
        }
        return temp1->height;
    }

    node *lrotate(node *t) {
        node *child = t->right;
        node *childleft = child->left;
        child->left = t;
        t->right = childleft;
        t->height = 1 + max(getheight(t->left), getheight(t->right));
        child->height = 1 + max(getheight(child->left), getheight(child->right));
        return child;
    }

    node *rrotate(node *t) {
        node *child = t->left;
        node *childright = child->right;
        child->right = t;
        t->left = childright;
        t->height = 1 + max(getheight(t->left), getheight(t->right));
        child->height = 1 + max(getheight(child->left), getheight(child->right));
        return child;
    }

    node *insert(node *temp, string k, string m) {
        if (!temp) {
            temp = new node(k, m);
            return temp;
        }
        else if (temp->keyword < k) {
            temp->right = insert(temp->right, k, m);
        }
        else if (temp->keyword > k) {
            temp->left = insert(temp->left, k, m);
        }
        else {
            cout << "Duplicate entry\n";
            return temp;
        }

        temp->height = 1 + max(getheight(temp->left), getheight(temp->right));
        int balance = getbalance(temp);

        if (balance > 1) {
            if (temp->left && temp->left->keyword > k) {
                return rrotate(temp);
            }
            else {
                temp->left = lrotate(temp->left);
                return rrotate(temp);
            }
        }
        else if (balance < -1) {
            if (temp->right && temp->right->keyword < k) {
                return lrotate(temp);
            }
            else {
                temp->right = rrotate(temp->right);
                return lrotate(temp);
            }
        }
        return temp;
    }

    node *del(node *temp, string s) {
        if (!temp) {
            cout << "Word to be deleted not present\n";
            return NULL;
        }
        if (s < temp->keyword) {
            temp->left = del(temp->left, s);
        }
        else if (s > temp->keyword) {
            temp->right = del(temp->right, s);
        }
        else {
            if (!temp->left && !temp->right) {
                delete temp;
                return NULL;
            }
            else if (!temp->right) {
                node *t = temp;
                t = t->left;
                delete temp;
                return t;
            }
            else if (!temp->left) {
                node *t = temp;
                t = t->right;
                delete temp;
                return t;
            }
            else {
                node *child = temp->left;
                while (child->right) {
                    child = child->right;
                }
                temp->keyword = child->keyword;
                temp->meaning = child->meaning;
                temp->left = del(temp->left, temp->keyword);
            }
        }

        temp->height = 1 + max(getheight(temp->left), getheight(temp->right));
        int balance = getbalance(temp);

        if (balance > 1) {
            if (getbalance(temp->left) >= 0) {
                return rrotate(temp);
            }
            else {
                temp->left = lrotate(temp->left);
                return rrotate(temp);
            }
        }
        else if (balance < -1) {
            if (getbalance(temp->right) <= 0) {
                return lrotate(temp);
            }
            else {
                temp->right = rrotate(temp->right);
                return lrotate(temp);
            }
        }
        return temp;
    }

    void inorder(node *temp) {
        if (!temp) {
            return;
        }
        inorder(temp->left);
        cout << temp->keyword << " - " << temp->meaning << endl;
        inorder(temp->right);
    }

    void reverse_inorder(node *temp) {
        if (!temp) {
            return;
        }
        reverse_inorder(temp->right);
        cout << temp->keyword << " - " << temp->meaning << endl;
        reverse_inorder(temp->left);
    }

public:
    void insert_keyword(string k, string m) {
        root = insert(root, k, m);
    }

    void delete_keyword(string k) {
        root = del(root, k);
    }

    void change_meaning(string k) {
        node *temp = root;
        while (temp) {
            if (k < temp->keyword) {
                temp = temp->left;
            }
            else if (k > temp->keyword) {
                temp = temp->right;
            }
            else {
                string new_meaning;
                cout << "Enter the new meaning for " << k << ": ";
                cin >> new_meaning;
                temp->meaning = new_meaning;
                return;
            }
        }
        cout << "Keyword not found\n";
    }

    void display_sorted() {
        inorder(root);
    }

    void display_reverse_sorted() {
        reverse_inorder(root);
    }
};

int main() {
    avl dictionary;
    int choice;
    string keyword, meaning;

    while (true) {
        cout << "1. Insert Keyword\n";
        cout << "2. Delete Keyword\n";
        cout << "3. Change Meaning\n";
        cout << "4. Display Dictionary (Sorted)\n";
        cout << "5. Display Dictionary (Reverse Sorted)\n";
        cout << "0. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1:
                cout << "Enter keyword and meaning: ";
                cin >> keyword >> meaning;
                dictionary.insert_keyword(keyword, meaning);
                break;
            case 2:
                cout << "Enter keyword to delete: ";
                cin >> keyword;
                dictionary.delete_keyword(keyword);
                break;
            case 3:
                cout << "Enter keyword to change meaning: ";
                cin >> keyword;
                dictionary.change_meaning(keyword);
                break;
            case 4:
                cout << "Dictionary (Sorted):\n";
                dictionary.display_sorted();
                break;
            case 5:
                cout << "Dictionary (Reverse Sorted):\n";
                dictionary.display_reverse_sorted();
                break;
            case 0:
                return 0;
            default:
                cout << "Invalid choice\n";
        }
    }

    return 0;
}

// t.c = O(log n)
